use anyhow::{Result};
use log::info;
use esp_idf_hal::{prelude::Peripherals};
use esp_idf_svc::{
    wifi::EspWifi,
    nvs::EspDefaultNvsPartition,
    eventloop::EspSystemEventLoop,
};
use embedded_svc::wifi::{ClientConfiguration, Configuration};
// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;
    let nvs = EspDefaultNvsPartition::take().unwrap();

    info!("Hello, world!");

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let mut wifi_driver = EspWifi::new(peripherals.modem, sysloop, Some(nvs))?;
    wifi_driver.set_configuration(&Configuration::Client(ClientConfiguration {
        ssid: app_config.wifi_ssid.into(),
        password: app_config.wifi_psk.into(),
        ..Default::default()
    })).unwrap();

    // Wait for the connection to be established
    wifi_driver.start()?;
    wifi_driver.connect()?;

    while !wifi_driver.is_connected()? {
        let config = wifi_driver.get_configuration()?;
        println!("Waiting for station {:?} to connect", config);
    }

    loop {
        println!("IP info {:?}", wifi_driver.sta_netif().get_ip_info()?);
        std::thread::sleep(std::time::Duration::from_secs(10));
    }
}