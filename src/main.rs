use anyhow::{Result};
use log::info;
use esp_idf_hal::{prelude::Peripherals, gpio::*, delay::{Ets, Delay}};
use esp_idf_svc::{
    wifi::EspWifi,
    nvs::EspDefaultNvsPartition,
    eventloop::EspSystemEventLoop,
    http::server::{Configuration as ServerConfiguration, EspHttpServer},
};
use embedded_svc::{
    wifi::{ClientConfiguration, Configuration},
    http::Method,
};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
};
// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;
use dht11::Dht11;

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;
    let nvs = EspDefaultNvsPartition::take().unwrap();

    info!("Hello, world!");

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let mut wifi_driver = EspWifi::new(peripherals.modem, sysloop, Some(nvs))?;
    wifi_driver.set_configuration(&Configuration::Client(ClientConfiguration {
        ssid: app_config.wifi_ssid.into(),
        password: app_config.wifi_psk.into(),
        ..Default::default()
    })).unwrap();

    // Wait for the connection to be established
    wifi_driver.start()?;
    wifi_driver.connect()?;

    while !wifi_driver.is_connected()? {
        let config = wifi_driver.get_configuration()?;
        println!("Waiting for station {:?} to connect", config);
        Delay::delay_ms(1000);
    }

    // Configure the GPIO pin
    let dht11_pin = PinDriver::input_output_od(peripherals.pins.gpio4).expect("Failed to initialize GPIO");
    let dht11 = Arc::new(Mutex::new(Dht11::new(dht11_pin)));

    //Set the HTTP server
    let mut server = EspHttpServer::new(&ServerConfiguration::default())?;

    server.fn_handler("/", Method::Get, |req| {
        let html = index_html();
        let mut response = req.into_ok_response()?;
        response.write(html.as_bytes())?;
        Ok(())
    })?;

    server.fn_handler("/temperature", Method::Get, move |request| {
        //Wait for the sensor to be ready
        println!("Waiting for sensor to be ready...");
        Delay::delay_ms(1000);

        let mut dht11_delay = Ets;
        
        match dht11.try_lock().unwrap().perform_measurement(&mut dht11_delay) {
            Ok(measurement) => {
                let html = temperature(measurement.temperature as f32 / 10.0, measurement.humidity as f32 / 10.0);
                let mut response = request.into_ok_response()?;
                response.write(html.as_bytes())?;
            },
            Err(_) => {
                let html = log_html("Failed to read sensor");
                let mut response = request.into_ok_response()?;
                response.write(html.as_bytes())?;
            },
        }

        Ok(())
    })?;

    loop {
        println!("IP info {:?}", wifi_driver.sta_netif().get_ip_info()?);
        sleep(Duration::from_millis(10000));
    }
}


fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from ESP32-S2!")
}

fn temperature(temp: f32, humid: f32) -> String {
    templated(format!("Chip temperature: {:.2}Â°C, Humidity: {:.2}%", temp, humid))
}

fn log_html(content: &str) -> String {
    templated(content)
}